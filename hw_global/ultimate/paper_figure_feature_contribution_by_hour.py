import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os
import sys
import argparse
import logging
import mlflow
import seaborn as sns
import shap
from typing import List, Dict, Tuple, Optional
sys.path.append('/home/jguo/research/hw_global/ultimate/')

from mlflow_tools import (
    generate_summary_and_kg_plots,
    create_day_night_summary,
    plot_shap_stacked_bar,
    plot_feature_group_stacked_bar,
    get_feature_groups,
    get_latex_label,
    get_label_with_unit,
    generate_group_shap_plots_by_climate_zone,
)
from mlflow_tools.group_data import calculate_group_shap_values, GroupData

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

def extract_shap_and_feature_columns(df: pd.DataFrame) -> Tuple[List[str], List[str]]:
    """
    Extracts SHAP and corresponding feature columns from a DataFrame.

    Args:
        df (pd.DataFrame): DataFrame containing SHAP values.

    Returns:
        tuple: (list of SHAP columns, list of feature columns)
    """
    shap_cols = [col for col in df.columns if col.endswith("_shap")]
    feature_cols = [col.replace("_shap", "") for col in shap_cols]
    return shap_cols, feature_cols

def get_experiment_and_run(experiment_name: str) -> Tuple[Optional[str], Optional[str]]:
    """
    Retrieves the experiment and the latest run from MLflow.

    Args:
        experiment_name (str): Name of the MLflow experiment.

    Returns:
        tuple: The experiment ID and the latest run ID.
    """
    mlflow.set_tracking_uri(uri="http://192.168.4.85:8080")
    logging.info("Set MLflow tracking URI")

    experiment = mlflow.get_experiment_by_name(experiment_name)
    if experiment is None:
        logging.error(f"Experiment '{experiment_name}' not found.")
        return None, None

    experiment_id = experiment.experiment_id
    logging.info(f"Found experiment with ID: {experiment_id}")

    runs = mlflow.search_runs(
        experiment_ids=[experiment_id], order_by=["start_time desc"], max_results=1
    )
    if len(runs) == 0:
        logging.error(f"No runs found in experiment '{experiment_name}'.")
        return experiment_id, None

    run = runs.iloc[0]
    run_id = run.run_id
    logging.info(f"Processing latest run with ID: {run_id}")

    return experiment_id, run_id

def main():

    ''' 
    Sample command:
    python paper_figure_feature_contribution_by_hour.py --experiment-name Combined_Final_noFSA_Hourly_HW98_Hour 2>&1 | tee rlog

    Available reports/plots and their corresponding command-line switches:

    1.  Summary Plots (Daytime & Nighttime, Global & per Climate Zone):
        *   Feature Summary & Importance Plots: --summary-feature
            -   Generates shap.summary_plot and shap.waterfall_plot for individual features.
            -   Separated for daytime and nighttime.
            -   Generated for global data and for each KGMajorClass.
            -   Saves underlying data to CSV.
        *   Group Summary & Importance Plots: --summary-group
            -   Generates shap.summary_plot and shap.waterfall_plot for feature groups.
            -   Separated for daytime and nighttime.
            -   Generated for global data and for each KGMajorClass.
            -   Saves underlying data to CSV.

    2.  Day/Night Feature Group Summary Table: --day-night-table
        *   Logs a Pandas DataFrame summarizing feature group contributions for Day, Night, and Day-Night Difference.

    3.  Hourly Stacked Bar Plots (Global & per Climate Zone): --hourly-stacked-bar
        *   Generates plot_feature_group_stacked_bar for feature groups.
        *   Shows mean SHAP contribution per hour for each group.
        *   Includes "Mean SHAP + Base Value" and "Base Value" lines.
        *   Generated for global data and for each KGMajorClass.
        *   Saves underlying data to CSV.

    4.  Group SHAP and Feature Value Plots by Hour (Global & per Climate Zone): --hourly-shap
        *   Uses generate_group_shap_plots_by_climate_zone.
        *   For each group, plots SHAP values of its constituent features over 24 hours (using plot_shap_stacked_bar).
        *   Includes "Mean SHAP + Base Value" and "Base Value" lines.
        *   Generated for global data and for each KGMajorClass.
        *   Saves underlying data to CSV.
        *   (Note: Corresponding feature value plots might also be generated by the called utility.)

    5.  FSH SHAP Interaction Plots (Global - Daytime & Nighttime): --fsh-interaction
        *   Generates shap.dependence_plot for 'hw_nohw_diff_FSH'.
        *   Shows interaction with all other features.
        *   Separated for global daytime and global nighttime data.

    Global Control Flags:
        --all: Enables all the above plot/report generation options.
        --only-summary: Enables only --summary-feature and --summary-group. Disables all others.
    '''
    """Main function to process SHAP values and generate plots."""
    logging.info("Starting feature contribution analysis...")

    # Parse arguments
    args = parse_arguments()
    logging.info(f"Parsed command line arguments: {vars(args)}")

    # Set flags based on --all argument if provided
    if args.all:
        args.summary_feature = True
        args.summary_group = True
        args.day_night_summary = True # This corresponds to --day-night-table
        args.hourly_stacked_bar = True
        args.hourly_shap = True
        args.plot_fsh_interaction_global = True # This corresponds to --fsh-interaction

    # If --only-summary is used, override other flags
    if args.only_summary:
        args.summary_feature = True
        args.summary_group = True
        # Disable all other specific plot flags
        args.day_night_summary = False
        args.hourly_stacked_bar = False
        args.hourly_shap = False
        args.plot_fsh_interaction_global = False
        logging.info("Running in --only-summary mode. Only feature and group summary plots will be generated.")

    # Get experiment and run
    experiment_id, run_id = get_experiment_and_run(args.experiment_name)
    if experiment_id is None or run_id is None:
        return

    # Setup paths
    artifact_uri = mlflow.get_run(run_id).info.artifact_uri
    artifact_uri = artifact_uri.replace(
        "mlflow-artifacts:",
        "/Trex/case_results/i.e215.I2000Clm50SpGs.hw_production.05/research_results/summary/mlflow/mlartifacts",
    )
    feather_file_name = args.feather_file_name
    logging.info(f"Using feather file: {feather_file_name}")
    shap_values_feather_path = os.path.join(
        artifact_uri, feather_file_name
    )
    output_dir = os.path.join(artifact_uri, "24_hourly_plot")
    os.makedirs(output_dir, exist_ok=True)

    # Load raw data
    all_df = pd.read_feather(shap_values_feather_path)
    base_value = all_df["base_value"].iloc[0] if "base_value" in all_df.columns else 0

    # Get feature names and groups
    shap_cols, feature_cols = extract_shap_and_feature_columns(all_df)
    feature_to_group_mapping = get_feature_groups(feature_cols)
    shap_df = all_df[shap_cols]
    feature_values_df = all_df[feature_cols]

    # Calculate group values
    obj_group_data = calculate_group_shap_values(all_df, feature_to_group_mapping)
    
    logging.info(f"all_df columns: {all_df.columns.tolist()}, shape: {all_df.shape}")
    logging.info(f"shap_cols: {shap_cols}, shape: {shap_df.shape}")
    logging.info(f"feature_cols: {feature_cols}, shape: {feature_values_df.shape}")
    logging.info(f"group_names: {obj_group_data.group_names}")

    # Generate feature-level summary plots if requested
    if args.summary_feature:
        logging.info("Processing feature-level summary plots with day/night separation...")
        day_hours = set(range(7, 19))  # 7 AM to 6 PM (18:00) inclusive

        if 'local_hour' not in all_df.columns:
            logging.error("'local_hour' column not found in all_df. Cannot separate day/night for feature-level summary plots.")
        else:
            day_df = all_df[all_df['local_hour'].isin(day_hours)].copy()
            night_df = all_df[~all_df['local_hour'].isin(day_hours)].copy()

            if not day_df.empty:
                logging.info("Generating daytime feature-level summary plots...")
                day_obj_group_data = calculate_group_shap_values(day_df, feature_to_group_mapping)
                day_output_sub_dir_name = "daytime_feature_summary_plots" # Changed sub_dir name
                day_specific_output_dir = os.path.join(output_dir, day_output_sub_dir_name)
                os.makedirs(day_specific_output_dir, exist_ok=True)
                generate_summary_and_kg_plots(
                    day_obj_group_data, day_specific_output_dir, plot_type="feature"
                )
            else:
                logging.warning("No daytime data found. Skipping daytime feature-level summary plots.")

            if not night_df.empty:
                logging.info("Generating nighttime feature-level summary plots...")
                night_obj_group_data = calculate_group_shap_values(night_df, feature_to_group_mapping)
                night_output_sub_dir_name = "nighttime_feature_summary_plots" # Changed sub_dir name
                night_specific_output_dir = os.path.join(output_dir, night_output_sub_dir_name)
                os.makedirs(night_specific_output_dir, exist_ok=True)
                generate_summary_and_kg_plots(
                    night_obj_group_data, night_specific_output_dir, plot_type="feature"
                )
            else:
                logging.warning("No nighttime data found. Skipping nighttime feature-level summary plots.")

    # Generate group-level summary plots if requested
    if args.summary_group:
        logging.info("Processing group-level summary plots with day/night separation...")
        day_hours = set(range(7, 19))

        if 'local_hour' not in all_df.columns:
            logging.error("'local_hour' column not found for group-level summary plots.")
        else:
            day_df = all_df[all_df['local_hour'].isin(day_hours)].copy()
            night_df = all_df[~all_df['local_hour'].isin(day_hours)].copy()

            if not day_df.empty:
                logging.info("Generating daytime group-level summary plots...")
                day_obj_group_data = calculate_group_shap_values(day_df, feature_to_group_mapping)
                day_output_sub_dir_name = "daytime_group_summary_plots" # Changed sub_dir name
                day_specific_output_dir = os.path.join(output_dir, day_output_sub_dir_name)
                os.makedirs(day_specific_output_dir, exist_ok=True)
                generate_summary_and_kg_plots(
                    day_obj_group_data, day_specific_output_dir, plot_type="group"
                )
            else:
                logging.warning("No daytime data for group-level summary plots.")

            if not night_df.empty:
                logging.info("Generating nighttime group-level summary plots...")
                night_obj_group_data = calculate_group_shap_values(night_df, feature_to_group_mapping)
                night_output_sub_dir_name = "nighttime_group_summary_plots" # Changed sub_dir name
                night_specific_output_dir = os.path.join(output_dir, night_output_sub_dir_name)
                os.makedirs(night_specific_output_dir, exist_ok=True)
                generate_summary_and_kg_plots(
                    night_obj_group_data, night_specific_output_dir, plot_type="group"
                )
            else:
                logging.warning("No nighttime data for group-level summary plots.")

    # Generate day/night summary table if requested (args.day_night_summary maps to --day-night-table)
    if args.day_night_summary:
        summary_df = create_day_night_summary(obj_group_data.shap_detail_df, all_df, output_dir)
        logging.info("\\nFeature Group Day/Night Summary Table:")
        logging.info("\\n" + str(summary_df))

    # Prepare data for hourly plots (needed for both stacked_bar and hourly_shap)
    # This calculation is done once if either of the hourly plots is requested.
    if args.hourly_stacked_bar or args.hourly_shap:
        raw_df_for_hourly = all_df # Use a distinct variable if all_df is modified elsewhere later
        global_base_values: pd.Series = raw_df_for_hourly.groupby("local_hour")["base_value"].first()
        base_values_by_hour_kg: pd.DataFrame = raw_df_for_hourly.groupby(["local_hour", "KGMajorClass"])["base_value"].first().reset_index()
        exclude_cols = ["global_event_ID", "lon", "lat", "time", "KGClass"]
        all_df_by_hour_kg = raw_df_for_hourly.drop(columns=exclude_cols, errors='ignore').groupby(["local_hour", "KGMajorClass"]).mean().reset_index()
        obj_group_data_hourly = calculate_group_shap_values(all_df_by_hour_kg, feature_to_group_mapping)
        kg_classes_hourly = ["global"] + sorted(all_df_by_hour_kg["KGMajorClass"].unique().tolist())


    # Generate hourly stacked bar plots if requested
    if args.hourly_stacked_bar:
        logging.info("Generating hourly stacked bar plots for feature groups...")
        for kg_class in kg_classes_hourly:
            feature_group_data = obj_group_data_hourly.shap_group_hourly_mean_df(kg_class)
            current_base_values = global_base_values
            if kg_class != "global":
                kg_base_values_df = base_values_by_hour_kg[base_values_by_hour_kg["KGMajorClass"] == kg_class]
                if not kg_base_values_df.empty:
                    current_base_values = kg_base_values_df.set_index("local_hour")["base_value"]
                else:
                    logging.warning(f"No base values for kg_class {kg_class} in hourly stacked bar. Using global.")
            
            plot_title = (
                "Global Hourly Feature Group Contribution"
                if kg_class == "global"
                else f"Hourly Feature Group Contribution for {get_latex_label(kg_class)}"
            )
            output_path = os.path.join(
                output_dir, f"hourly_feature_group_contribution_{kg_class}.png"
            )
            plot_feature_group_stacked_bar(
                feature_group_data, "local_hour", output_path, plot_title, current_base_values
            )

    # Generate hourly SHAP plots (features within groups) if requested
    if args.hourly_shap:
        logging.info("Generating hourly SHAP plots (features within groups)...")
        for kg_class in kg_classes_hourly: # Iterate through "global" and each KG class
            current_base_values = global_base_values
            if kg_class != "global":
                kg_base_values_df = base_values_by_hour_kg[base_values_by_hour_kg["KGMajorClass"] == kg_class]
                if not kg_base_values_df.empty:
                    current_base_values = kg_base_values_df.set_index("local_hour")["base_value"]
                else:
                    logging.warning(f"No base values for kg_class {kg_class} in hourly_shap. Using global.")

            # The generate_group_shap_plots_by_climate_zone expects a list of kg_classes
            # So we pass a list containing just the current kg_class (or "global")
            generate_group_shap_plots_by_climate_zone(
                obj_group_data=obj_group_data_hourly, # Use the hourly aggregated data
                kg_classes=[kg_class], 
                output_dir=output_dir, # Main output dir, function will create subdirs if needed
                base_values=current_base_values,
                show_total_feature_line=not args.hide_total_feature_line,
            )

    # Generate FSH interaction plots if requested (args.plot_fsh_interaction_global maps to --fsh-interaction)
    if args.plot_fsh_interaction_global:
        logging.info("Generating FSH SHAP interaction plots for global (day/night)...")
        day_hours = set(range(7, 19))
        fsh_feature_col = "hw_nohw_diff_FSH"
        fsh_shap_col = "hw_nohw_diff_FSH_shap"

        if 'local_hour' not in all_df.columns or fsh_feature_col not in all_df.columns or fsh_shap_col not in all_df.columns:
            logging.error(f"Required columns for FSH interaction not found. Check 'local_hour', '{fsh_feature_col}', '{fsh_shap_col}'.")
        else:
            day_df_interaction = all_df[all_df['local_hour'].isin(day_hours)].copy()
            night_df_interaction = all_df[~all_df['local_hour'].isin(day_hours)].copy()
            other_feature_cols_for_interaction = [col for col in feature_cols if col != fsh_feature_col]

            if not day_df_interaction.empty:
                logging.info(f"Generating daytime FSH interaction plots...")
                shap_values_day = day_df_interaction[shap_cols].values
                features_day = day_df_interaction[feature_cols]
                for interaction_feature in other_feature_cols_for_interaction:
                    if interaction_feature not in features_day.columns:
                        logging.warning(f"Interaction feature '{interaction_feature}' not in daytime data. Skipping.")
                        continue
                    plt.figure(figsize=(10, 8))
                    try:
                        shap.dependence_plot(
                            fsh_feature_col, shap_values_day, features_day,
                            interaction_index=interaction_feature, show=False
                        )
                        fsh_latex = get_latex_label(fsh_feature_col)
                        interaction_latex = get_latex_label(interaction_feature)
                        x_axis_label = get_label_with_unit(fsh_feature_col)
                        shap_values_unit_latex = "K"
                        y_axis_label = f"SHAP value for {fsh_latex} ({shap_values_unit_latex})"
                        plt.xlabel(x_axis_label)
                        plt.ylabel(y_axis_label)
                        plt.title(f"{fsh_latex} SHAP Interaction with {interaction_latex} (Global - Daytime)")
                        day_interaction_plot_path = os.path.join(output_dir, f"fsh_interaction_with_{interaction_feature.replace('/', '_')}_global_daytime.png")
                        plt.savefig(day_interaction_plot_path)
                        plt.close()
                    except Exception as e:
                        logging.error(f"Error in daytime FSH interaction plot with {interaction_feature}: {e}")
                        plt.close()
            else:
                logging.warning("No daytime data for FSH interaction plot.")

            if not night_df_interaction.empty:
                logging.info(f"Generating nighttime FSH interaction plots...")
                shap_values_night = night_df_interaction[shap_cols].values
                features_night = night_df_interaction[feature_cols]
                for interaction_feature in other_feature_cols_for_interaction:
                    if interaction_feature not in features_night.columns:
                        logging.warning(f"Interaction feature '{interaction_feature}' not in nighttime data. Skipping.")
                        continue
                    plt.figure(figsize=(10, 8))
                    try:
                        shap.dependence_plot(
                            fsh_feature_col, shap_values_night, features_night,
                            interaction_index=interaction_feature, show=False
                        )
                        fsh_latex = get_latex_label(fsh_feature_col)
                        interaction_latex = get_latex_label(interaction_feature)
                        x_axis_label = get_label_with_unit(fsh_feature_col)
                        shap_values_unit_latex = "K"
                        y_axis_label = f"SHAP value for {fsh_latex} ({shap_values_unit_latex})"
                        plt.xlabel(x_axis_label)
                        plt.ylabel(y_axis_label)
                        plt.title(f"{fsh_latex} SHAP Interaction with {interaction_latex} (Global - Nighttime)")
                        night_interaction_plot_path = os.path.join(output_dir, f"fsh_interaction_with_{interaction_feature.replace('/', '_')}_global_nighttime.png")
                        plt.savefig(night_interaction_plot_path)
                        plt.close()
                    except Exception as e:
                        logging.error(f"Error in nighttime FSH interaction plot with {interaction_feature}: {e}")
                        plt.close()
            else:
                logging.warning("No nighttime data for FSH interaction plot.")

    logging.info("Analysis completed successfully.")
    logging.info(f"All outputs have been saved to: {output_dir}")

def parse_arguments() -> argparse.Namespace:
    """
    Parses command-line arguments.

    Returns:
        argparse.Namespace: Parsed arguments.
    """
    parser = argparse.ArgumentParser(
        description="Report and plot SHAP value contributions by feature group and hour."
    )
    parser.add_argument(
        "--experiment-name",
        type=str,
        default="Combined_Final3_NO_LE_Hourly_HW98_Hour",
        help="Name of the MLflow experiment to process.",
    )
    parser.add_argument(
        "--top-features",
        type=int,
        default=None,
        help="Number of top features to plot. If None, plot all features.",
    )
    parser.add_argument(
        "--feather-file-name",
        type=str,
        default="shap_values_with_additional_columns.feather",
        help="Name of the input feather file containing SHAP values.",
    )
    parser.add_argument(
        "--hide-total-feature-line",
        action="store_true",
        help="Hide the total feature value line in feature value plots.",
    )

    # New granular plot/report flags
    parser.add_argument(
        "--summary-feature",
        action="store_true",
        help="Generate feature-level summary and importance plots (day/night, global/KG).",
    )
    parser.add_argument(
        "--summary-group",
        action="store_true",
        help="Generate group-level summary and importance plots (day/night, global/KG).",
    )
    parser.add_argument(
        "--day-night-table", # Renamed from --day-night-summary for clarity, but maps to args.day_night_summary internally for less code change later
        dest="day_night_summary", # Keep internal variable name for now to minimize changes
        action="store_true",
        help="Generate the day/night feature group summary table.",
    )
    parser.add_argument(
        "--hourly-stacked-bar",
        action="store_true",
        help="Generate hourly stacked bar plots for feature groups (global/KG).",
    )
    parser.add_argument(
        "--hourly-shap",
        action="store_true",
        help="Generate hourly SHAP plots for features within groups (global/KG).",
    )
    parser.add_argument(
        "--fsh-interaction", # Renamed from --plot-fsh-interaction-global for consistency
        dest="plot_fsh_interaction_global", # Keep internal variable name
        action="store_true",
        help="Generate SHAP interaction plot for FSH (global, day/night).",
    )

    # Control flags
    parser.add_argument(
        "--all",
        action="store_true",
        help="Run all analyses: all summary plots, day/night table, all hourly plots, and FSH interaction plots.",
    )
    parser.add_argument(
        "--only-summary",
        action="store_true",
        help="Run only the feature and group summary plots (day/night, global/KG).",
    )

    return parser.parse_args()

if __name__ == "__main__":
    main()